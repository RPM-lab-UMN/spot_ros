#!/usr/bin/env python3

from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *

import rospy

from geometry_msgs.msg import PoseStamped

from interactive_marker_utils import (GoToMarkerCallback, 
                                    GrabMarkerCallback, 
                                    DragToMarkerCallback,
                                    create_interactive_marker)

class InteractiveMarkerPoseSubscriber(object):
    '''Subscribes to a pose topic and updates the interactive marker accordingly.'''
    def __init__(self, topic_name, marker, server):
        self._sub = rospy.Subscriber(topic_name, PoseStamped, self)
        self._marker, self._server = marker, server
    def __call__(self, pose_stamped):
        rospy.loginfo('Updating interactive marker pose.')
        rospy.logdebug(pose_stamped)
        self._server.applyChanges()
        if not self._server.setPose(self._marker.name, pose_stamped.pose):
            rospy.logerr("Failed to set pose for marker.")
        else: self._server.applyChanges()

        # rospy.loginfo(self._server.marker_contexts[self._marker.name])
        # rospy.loginfo(self._server.pending_updates[self._marker.name].update_type == UpdateContext.FULL_UPDATE)
        

import numpy as np

def main():
    rospy.init_node("spot_interactive_marker", anonymous=True)
    mesh_dir = "package://spot_viz/meshes"
    chair_arm = {
        'name': 'chair_arm',
        'mesh': f'{mesh_dir}/chair_arm.stl',
        'mesh_scale': 0.001,
        'grasp_t': [0.0, 0.0, 0.0],
        'grasp_R': [0, 0, np.pi/2],
    }
    chair = {
        'name': 'chair',
        'mesh': f"{mesh_dir}/office_chair/10239_Office_Chair_v1_L3.obj",
        'mesh_scale': 0.0075,
        'grasp_t': [0.2, 0.0, 0.5],
        'grasp_R': [0, 0, np.pi],
    }
    obj = chair_arm

    # spawn cube with interactive marker in rviz for right arm
    server = InteractiveMarkerServer("chair_handle")
    int_marker = create_interactive_marker(
            name=obj['name'],
            mesh=obj['mesh'],
            mesh_scale=obj['mesh_scale'],
            control_axis=['x','y','z','yaw']
            )
    server.insert(int_marker, lambda feedback: feedback)
    server.applyChanges()

    # Add a menu
    menu_handler = MenuHandler()
    
    t, R = obj['grasp_t'], obj['grasp_R']
    menu_handler.insert("go to", callback=GoToMarkerCallback())
    menu_handler.insert("grasp left handle", callback=GrabMarkerCallback(t=t, R=R))
    menu_handler.insert("drag to", callback=DragToMarkerCallback(t=t, R=R))
    menu_handler.apply(server, int_marker.name)

    update_merker_sub = InteractiveMarkerPoseSubscriber('tcpu', int_marker, server)

    rospy.spin()

if __name__ == "__main__":
    main()