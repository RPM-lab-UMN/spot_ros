#!/usr/bin/env python3

from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import *

import numpy as np
import rospy

from interactive_marker_utils import (GoToMarkerCallback,
                                      GoToRightMarkerCallback,
                                    GrabMarkerCallback,
                                    DragToMarkerCallback,
                                    create_interactive_marker,
                                    MarkerPoseSubscriber,
                                    TriggerCallback
                                    )

def main():
    rospy.init_node("spot_interactive_marker", anonymous=True)
    mesh_dir = "package://spot_viz/meshes"

    # chair_arm = {
    #     'name': 'chair_arm',
    #     'mesh': f'{mesh_dir}/chair_arm.stl',
    #     'mesh_scale': 0.001,
    #     'grasp_t': [0.0, 0.0, 0.0],
    #     'grasp_R': [0, 0, np.pi/2],
    #     'tag_pose_offset': np.eye(4),
    # }

    chair = {
        'name': 'chair',
        'mesh': f"{mesh_dir}/office_chair/10239_Office_Chair_v1_L3.obj",
        'mesh_scale': 0.0075,

        #################### Grasp relative to Chair ####################
        ## left armrest 
        # 'name': 'left armrest', 
        # 'grasp_t': [0.2, 0.0, 0.5],
        # 'grasp_R': [0, 0, np.pi],
        
        # ## left armrest stem - ish
        # 'name': 'left armrest stem', 
        # 'grasp_t': [0.2, 0.0, 0.45],
        # 'grasp_R': [0.0 , 2.22144147, 2.22144147],

        ## back rest
        # 'name': 'backrest',
        # 'grasp_t': [0.2, 0.15, 0.6],
        # 'grasp_R': [0.0 , 2.22144147, 2.22144147],

        #################### Mesh relative to tag ####################
        ## Tag set upright on bench center
        # 'tag_pose_offset': np.array([[1.0,  0.0, 0.0, 0.0],
        #                              [0.0,  0.0, -1.0, 0.35],
        #                              [0.0, 1.0, 0.0, 0.1],]),
        ## Tag stuck on front of backrest
        # 'tag_pose_offset': np.array([[1.0,  0.0, 0.0, 0.0],
        #                              [0.0,  0.0, -1.0, 0.8],
        #                              [0.0, 1.0, 0.0, -0.2],]),
        ## Tag hanging from the back of seat
        'tag_pose_offset': np.array([[-1.0,  0.0, 0.0, 0.0],
                                     [0.0,  0.0, -1.0, 0.4],
                                     [0.0, -1.0, 0.0,  0.25],]),

        ########### Right Pose Offset for Robot to GoTo ##############

        'right_pose_t': [-0.9, 0.1, 0.6],
        'right_pose_R': [0.0 , 5.31, 2.22144147],

    }

    grasps = [
        {
            'name': 'backrest left side',
            'grasp_t': [0.2, 0.15, 0.6],
            'grasp_R': [0.0, 2.22144147, 2.22144147],
        },
        {
            'name': 'backrest right side',
            'grasp_t': [-0.2, 0.15, 0.6],
            'grasp_R': [1.57079632679, 0.0, 0.0],
        },
    ]

    obj = chair

    # stores the current grasp position
    # callbacks will update and read from here
    cur_grasp = {
        't': None,
        'R': None
    }

    # spawn cube with interactive marker in rviz for right arm
    server = InteractiveMarkerServer("chair_handle")
    int_marker = create_interactive_marker(
            name=obj['name'],
            mesh=obj['mesh'],
            mesh_scale=obj['mesh_scale'],
            axis_scale=0.8,
            control_axis=['x','y','z', 'roll', 'pitch', 'yaw']
            )
    server.insert(int_marker, lambda feedback: feedback)
    server.applyChanges()

    # Subscribe to pose topic to update marker pose
    update_marker_sub = MarkerPoseSubscriber(
                                'tcpu', 
                                int_marker, 
                                server, 
                                T=obj['tag_pose_offset']
                            )

    # Add a menu
    menu_handler = MenuHandler()

    t, R = obj['grasp_t'], obj['grasp_R']
    right_t, right_R = obj['right_pose_t'], obj['right_pose_R']
    menu_handler.insert("toggle tag tracking",
                        callback=update_marker_sub.toggle)
    # Toggle pose topic subscription & update tickbox state
    # Uses rviz visualization_tutorials/interactive_marker_tutorials/scripts/menu.py -> enableCb as a base
    def toggle_tag_tracking_callback(feedback):
        update_marker_sub.toggle()
        rospy.loginfo("Toggle pose topic subscription")

        entry_id = feedback.menu_entry_id
        state = menu_handler.getCheckState(entry_id)

        #TODO fix tick/unticking logic
        if state == MenuHandler.CHECKED:
            menu_handler.setCheckState(entry_id, MenuHandler.UNCHECKED)
            rospy.loginfo("Unchecking menu tickbox")
        else:
            menu_handler.setCheckState(entry_id, MenuHandler.CHECKED)
            rospy.loginfo("Checking menu tickbox")

        menu_handler.reApply(server)
        rospy.loginfo("sending update to server")
        server.applyChanges()

    tag_tracking_button = menu_handler.insert("toggle tag tracking", callback=toggle_tag_tracking_callback)
    menu_handler.setCheckState(tag_tracking_button, MenuHandler.CHECKED)

    menu_handler.insert("go to",
                        callback=GoToMarkerCallback(server_name='spot/trajectory'))
    menu_handler.insert("go to right",
                        callback=GoToMarkerCallback(server_name='spot/trajectory',
                                                         t=right_t, R=right_R))
    menu_handler.insert(f"grasp {obj['name']}",
                        callback=GrabMarkerCallback(server_name='spot/grasp',
                                                    t=t, R=R))
    menu_handler.insert("backrest", parent="grasp")
    menu_handler.insert("arm", parent="grasp")
    menu_handler.insert("drag to",
                        callback=DragToMarkerCallback(server_name='spot/manipulate',
                                                      t=t, R=R))

    grasp_menu = menu_handler.insert('grasp')
    for grasp in grasps:
        menu_handler.insert(grasp['name'], grasp_menu,
                            callback=GrabMarkerCallback(server_name='spot/grasp',
                                                        grasp_pos=cur_grasp,
                                                        t=grasp['grasp_t'],
                                                        R=grasp['grasp_R']))

    drag_button = menu_handler.insert("drag to",
                                      callback=DragToMarkerCallback(server_name='spot/manipulate',
                                                                    grasp_pos=cur_grasp))

    menu_handler.insert("stow arm",
                        callback=TriggerCallback('spot/arm_stow'))
    menu_handler.apply(server, int_marker.name)

    rospy.spin()

if __name__ == "__main__":
    main()
