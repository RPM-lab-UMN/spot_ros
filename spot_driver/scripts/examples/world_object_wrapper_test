#!/usr/bin/env python3

import logging

from spot_driver.spot_wrapper import SpotWrapper
from spot_driver.utils.world_objects_wrapper import WorldObjectHandler

from bosdyn.client.image import ImageClient, build_image_request
from bosdyn.api.image_pb2 import Image 

import cv2
import numpy as np
import apriltag


import time
import rospy
import tf2_ros
from geometry_msgs.msg import TransformStamped

def image_shot_to_np(image, gray=True):
    im = cv2.imdecode(
            np.frombuffer(image.data, dtype=np.uint8),
        -1)
    if gray: im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
    return np.array(im)

def detect_objects_using_hand_cam(image_client, source='hand_color_image'):
    im_req = build_image_request(
                    source,
                    pixel_format=Image.PixelFormat.PIXEL_FORMAT_RGB_U8,
                )
    pb2_im = image_client.get_image([im_req])
    np_image =  image_shot_to_np(pb2_im[0].shot.image)

    options = apriltag.DetectorOptions(families="tag36h11")
    detector = apriltag.Detector(options)
    detections = detector.detect(np_image)
    # Estimate tag pose
    intrinsics = pb2_im[0].source.pinhole.intrinsics
    cam_params = (
        intrinsics.focal_length.x, 
        intrinsics.focal_length.y,
        intrinsics.principal_point.x, 
        intrinsics.principal_point.y
        )
    tag_size=0.036  # meters
    poses = [
        detector.detection_pose(d, cam_params, tag_size)[0] 
        for d in detections
    ]

    return poses, pb2_im






if __name__=='__main__':
    '''
    NOTE: This script test the WorldObjectHandler class without requiring 
    any ros specific code. The wrapper could be used with other pure python 
    code.
    ''' 
    FORMAT = '%(message)s'
    logging.basicConfig(format=FORMAT)
    logger = logging.getLogger("rosout")
    logger.debug('Starting code.')

    spot_wrapper = SpotWrapper('admin', 
                               'pvwmr4j08osj', 
                               '192.168.80.3',  #'10.0.0.3', 
                                logger=logger,
                                estop_timeout=9.0,)


    logger.setLevel('DEBUG')
    spot_wrapper.claim()
    # spot_wrapper.power_on()
    # spot_wrapper.stand()
    
    logger.debug('Successfully started.')
    
    world_object_wrapper = WorldObjectHandler(spot_wrapper._robot)

    logger.debug('Created object wrapper.')

    image_client = spot_wrapper._robot.ensure_client(ImageClient.default_service_name)
    
    poses, pb2_ims = detect_objects_using_hand_cam(image_client)

    if len(poses) == 0:
        logger.error('Could not detect tag...')
        exit(1)

    tag1_name = 'apriltag'
    logger.debug(f"id: {world_object_wrapper.add_cam_detected_object(tag1_name, poses[0], pb2_ims[0].shot, {'grasp':[1,2,3]})}")
    logger.debug('Added April tag object')

    logger.debug('Getting object in frame.')

    logger.debug('\n'+'#'*50)
    wo = world_object_wrapper.get_object_transform(tag1_name)
    logger.debug(wo)
    logger.debug('trying again...')
    world_object_wrapper.get_object_transform(tag1_name)
    logger.debug(wo)
    logger.debug('Success!')


    # NOTE: takes a bit of time removed temporarily for convinience.
    # logger.debug('#'*50)
    # logger.debug(f'world_object_wrapper known frames {world_object_wrapper.get_known_frames()}')
    # logger.debug(f'image frame_tree contains {[k for k in pb2_ims[0].shot.transforms_snapshot.child_to_parent_edge_map]}')

    logger.debug('\n'+'#'*50)
    logger.debug(f'now lets add an object without providing its corresponding frame_tree.')
    sensor_frame = pb2_ims[0].shot.frame_name_image_sensor
    tag2_name = 'second_tag'
    logger.debug(f"id: { world_object_wrapper.add_object(tag2_name, poses[0], sensor_frame)}")
    logger.debug(f'Success!!!')


    # logger.debug(f'all the frames known by the world object wrapper: {world_object_wrapper.get_all_known_frames()}')
    logger.debug('\n'+'#'*50)
    logger.debug(f'\nlets see all the objects we have:')
    for o in world_object_wrapper.get_world_objects():
        logger.debug(f'\t{o.name}')
    logger.debug('Again...')
    logger.debug(f'lets see all the objects we have:')
    for o in world_object_wrapper.get_world_objects():
        logger.debug(f'\t{o.name}')


    logger.debug(f'Now publish the transform in a 1 Hz loop')

    rospy.init_node('my_tf_broadcaster')
    rate = rospy.Rate(1.0)
    broadcaster = tf2_ros.StaticTransformBroadcaster()
    relative_frame = sensor_frame  #'vision'
    tag_name = tag2_name
    while not rospy.is_shutdown():
        try:
            # tag_T = world_object_wrapper.get_object_transform(tag_name, relative_frame)
            tag_T = poses[0]

            static_transformStamped = TransformStamped()

            static_transformStamped.header.stamp = rospy.Time.now()
            static_transformStamped.header.frame_id = relative_frame
            static_transformStamped.child_frame_id = tag_name

            static_transformStamped.transform.translation.x = float(tag_T.x)
            static_transformStamped.transform.translation.y = float(tag_T.y)
            static_transformStamped.transform.translation.z = float(tag_T.z)

            static_transformStamped.transform.rotation.x = tag_T.rot.x
            static_transformStamped.transform.rotation.y = tag_T.rot.y
            static_transformStamped.transform.rotation.z = tag_T.rot.z
            static_transformStamped.transform.rotation.w = tag_T.rot.w

            broadcaster.sendTransform(static_transformStamped)
        except Exception as e: 
            logger.debug(e)
        rate.sleep()