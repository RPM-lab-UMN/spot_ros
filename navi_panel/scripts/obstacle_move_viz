#!/usr/bin/env python3

from spot_msgs.msg import (ObstacleMoveAction, ObstacleMoveGoal, ObstacleMoveResult, ObstacleMoveFeedback,
                           MultiGraspAction, MultiGraspGoal, MultiGraspResult, MultiGraspFeedback,
                           GripperAction, GripperGoal, GripperResult, GripperFeedback)
from geometry_msgs.msg import Pose, PoseStamped, Vector3
from visualization_msgs.msg import Marker
from std_msgs.msg import Header, ColorRGBA
from std_srvs.srv import Trigger, TriggerRequest
from bosdyn.client.math_helpers import SE3Pose as bdSE3Pose
from bosdyn.client.math_helpers import Quat as bdQuat
from scipy.spatial.transform import Rotation as R

import numpy as np
from copy import deepcopy
import rospy
import actionlib




def main():
    rospy.init_node("obstacle_move_viz", anonymous=True)

    # state variables
    _feedback = ObstacleMoveFeedback()
    _result = ObstacleMoveResult()

    # helper functions
    def _handle_action(goal):
        #TODO: create a method to clean all the obstacle markers

        # Send markers for initial robot position, obstacle pose estimate, and obstacle destination
        m = Marker(
            header=Header(
                frame_id="odom",
                stamp=rospy.Time.now()
            ),

            ns="navi_breadcrumbs",
            id=0,

            type=Marker.CYLINDER,
            pose=goal.spot_location.pose,
            action=Marker.ADD,

            color=ColorRGBA(
                r=1.0,
                g=0.7,
                b=0.2,
                a=1.0
            ),

            scale=Vector3(
                x=0.2,
                y=0.2,
                z=0.8
            )
        )
        _marker_pub.publish(m)

        m = Marker(
            header=Header(
                frame_id="body",
                stamp=rospy.Time.now()
            ),

            ns="navi_breadcrumbs",
            id=1,

            type=Marker.CYLINDER,
            pose=goal.obstacle_location.pose,
            action=Marker.ADD,

            color=ColorRGBA(
                r=0.0,
                g=0.7,
                b=1.0,
                a=1.0
            ),

            scale=Vector3(
                x=1.0,
                y=1.0,
                z=0.1
            )
        )
        _marker_pub.publish(m)

        m = Marker(
            header=Header(
                frame_id="odom",
                stamp=rospy.Time.now()
            ),

            ns="navi_breadcrumbs",
            id=2,

            type=Marker.CYLINDER,
            pose=goal.spot_destination.pose,
            action=Marker.ADD,

            color=ColorRGBA(
                r=0.0,
                g=0.8,
                b=0.2,
                a=1.0
            ),

            scale=Vector3(
                x=1.0,
                y=1.0,
                z=0.1
            )
        )
        _marker_pub.publish(m)


        # >> send result
        _result.success = True
        _result.message = "Successfully Visualize obstacle moving process"
        _server.set_succeeded(_result)

    # subscribers & clients
    _marker_pub = rospy.Publisher("grasp_markers", Marker, queue_size=10)
    rospy.loginfo("Created marker publisher.")

 

    # server initialization
    _server = actionlib.SimpleActionServer(
        "/spot/move_obstacle_viz",
        ObstacleMoveAction,
        execute_cb=_handle_action,
        auto_start=False,
    )

    _server.start()

    rospy.loginfo("Spinning obstacle_mover_viz.")

    rospy.spin()


if __name__ == "__main__":
    main()
